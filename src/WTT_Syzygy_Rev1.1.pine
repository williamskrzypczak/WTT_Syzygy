//@version=5
indicator("WTT_Syzygy_Rev1.1", shorttitle="WTT_Syzygy R1.1", overlay=true, max_boxes_count=500, max_labels_count=500)

// =============================================================================
// WaveRider Trading Technologies - WTT_Syzygy Unified Indicator
// Version: Rev1.1
// 
// Description: A comprehensive trading indicator that combines volume spike 
// detection with support/resistance zone analysis to provide enhanced market 
// insights and trading signals.
//
// Features:
// - Volume spike detection with configurable thresholds
// - Support and resistance zone identification with liquidity analysis
// - Daily high/low tracking
// - Zone penetration alerts
// - Unified alert system for all signal types
//
// Revision History:
// R1.1: Enhanced visual indicators - Changed volume spike signals from circles to small labels, zone penetration from circles to tiny triangles, enabled low liquidity zones by default for comprehensive zone visibility
// R1.0: Initial unified release combining WTT_VolumeSpike v1.2 and WTT_SupportResistance R1.65
// =============================================================================

// =============================================================================
// INPUT PARAMETERS
// =============================================================================

// Volume Spike Settings
volumeLength = input.int(20, "Volume Lookback Period", minval=5, maxval=100, group="Volume Spike Settings")
volumeThreshold = input.float(1.2, "Volume Spike Threshold", minval=1.0, maxval=5.0, step=0.1, group="Volume Spike Settings")
priceChangeThreshold = input.float(0.5, "Price Change Threshold (%)", minval=0.1, maxval=2.0, step=0.1, group="Volume Spike Settings")
useATR = input.bool(true, "Use ATR for Price Filter", group="Volume Spike Settings")
atrLength = input.int(14, "ATR Length", minval=5, maxval=50, group="Volume Spike Settings")
atrMultiplier = input.float(1.0, "ATR Multiplier", minval=0.5, maxval=3.0, step=0.1, group="Volume Spike Settings")

// Support/Resistance Settings
box_amount = input.int(5, 'Number of Liquidity Zones', step=1, tooltip="Set the displayed number of liquidity zones", group="Support/Resistance Settings")
color_high_sup = input.color(color.gray, 'Support Zone Color', inline='sup', group="Support/Resistance Settings")
color_high_res = input.color(color.rgb(0, 128, 128), 'Resistance Zone Color', inline='sup', group="Support/Resistance Settings")
show_low_liquidity = input.bool(true, "Show Low Liquidity Zones", group="Support/Resistance Settings", tooltip="Toggle visibility of low liquidity zones")

// Alert Settings
enableAlerts = input.bool(true, "Enable All Alerts", group="Alert Settings")
alert_threshold_med = input.float(3, "Medium Liquidity Threshold", minval=1, maxval=10, step=0.1, group="Alert Settings", tooltip="Volume strength value to consider as medium liquidity (default: 3)")
alert_threshold_high = input.float(7, "High Liquidity Threshold", minval=1, maxval=10, step=0.1, group="Alert Settings", tooltip="Volume strength value to consider as high liquidity (default: 7)")
penetration_threshold = input.float(0.50, "Zone Penetration Threshold", minval=0.1, maxval=0.9, step=0.05, group="Alert Settings", tooltip="Percentage of zone height required to trigger penetration alerts (default: 50%)")
show_alert_indicators = input.bool(true, "Show Alert Indicators", group="Alert Settings", tooltip="Show visual indicators on the chart for alert triggers.")

// Display Settings
showSignals = input.bool(true, "Show Volume Spike Signals", group="Display Settings")
showVolumeBars = input.bool(false, "Show Volume Spike Bars", group="Display Settings")
show_daily_levels = input.bool(false, "Show Daily High/Low", group="Display Settings", tooltip="Display the highest high and lowest low of the current trading day")

// =============================================================================
// FUNCTION DEFINITIONS
// =============================================================================

// Normalize volume for support/resistance analysis
normalize_volume() =>
    vol = math.avg(volume, 10) / 10
    reference_vol = ta.percentile_nearest_rank(vol, 1000, 99)
    norm_vol = vol / reference_vol * 5
    norm_vol := norm_vol >= 10 ? 10 : norm_vol
    norm_vol

// =============================================================================
// VOLUME SPIKE CALCULATIONS
// =============================================================================

// Volume analysis for spike detection
volumeMA = ta.sma(volume, volumeLength)
volumeRatio = volume / volumeMA
isVolumeSpike = volumeRatio > volumeThreshold

// Price analysis for spike detection
priceChange = ((close - close[1]) / close[1]) * 100
atr = ta.atr(atrLength)
priceThreshold = useATR ? atr * atrMultiplier : priceChangeThreshold

// Volume spike signal generation
longVolumeCondition = isVolumeSpike and priceChange > priceThreshold and close > open
shortVolumeCondition = isVolumeSpike and priceChange < -priceThreshold and close < open

// =============================================================================
// SUPPORT/RESISTANCE ZONE MANAGEMENT
// =============================================================================

// Variables to track price in zones
var bool price_in_resistance = false
var bool price_in_support = false
var bool was_in_resistance = false
var bool was_in_support = false
var bool significant_zone_penetration = false
var string penetration_zone_type = ""

// Arrays to store boxes and their liquidity levels
var box_res_array = array.new<box>()
var box_sup_array = array.new<box>()
var float_res_levels = array.new<float>()
var float_sup_levels = array.new<float>()

// Function to check if price is in zones and manage boxes
process_zones(boxes, levels, is_resistance) =>
    price_in_zone = false
    zone_level = 0.0
    zone_price = 0.0
    
    // Create a list of indices to remove (we can't remove while iterating)
    var indices_to_remove = array.new<int>()
    array.clear(indices_to_remove)
    
    // Process each box
    if boxes.size() > 0
        for i = 0 to boxes.size() - 1
            box_id = boxes.get(i)
            box_id.set_right(bar_index + 20)
            box_id.set_border_color(na)
            
            // Check if price has broken the zone
            broken_zone = is_resistance ? 
             high > box_id.get_top() : 
             low < box_id.get_bottom()
            
            if broken_zone
                box_id.set_right(bar_index)
                box_id.set_text('')
                array.push(indices_to_remove, i)
            else
                // Check if current price is inside this box
                box_top = box_id.get_top()
                box_bottom = box_id.get_bottom()
                
                if close >= box_bottom and close <= box_top
                    price_in_zone := true
                    zone_level := math.max(zone_level, levels.get(i))
                    // Store the key price level for breakout detection
                    zone_price := is_resistance ? box_top : box_bottom
    
    // Remove boxes that were broken (in reverse order to maintain correct indices)
    if indices_to_remove.size() > 0
        for i = indices_to_remove.size() - 1 to 0
            idx = indices_to_remove.get(i)
            boxes.remove(idx)
            levels.remove(idx)
    
    [price_in_zone, zone_level, zone_price]

// Main function to create and manage liquidity zones
update_liquidity_zones() =>
    volume_ = normalize_volume()[1]
    h = ta.highest(15)
    l = ta.lowest(15)
    _size = (high - low) / 2

    // Color definitions with transparency
    color_low_sup = color.new(color_high_sup, 95)
    color_low_res = color.new(color_high_res, 95)
    
    // Darker boxes for better visibility
    color_upper = color.new(color_high_sup, math.max(35, 75 - volume_ * 9))
    color_lower = color.new(color_high_res, math.max(35, 75 - volume_ * 9))
    text_col = color.white
    
    // Set the label text based on liquidity level
    txt = volume_ < alert_threshold_med ? "Weak" : 
          volume_ < alert_threshold_high ? "Moderate" : 
          "Strong"
    
    // Calculate current liquidity level
    current_level = volume_ >= alert_threshold_high ? alert_threshold_high : 
                   volume_ >= alert_threshold_med ? alert_threshold_med : 
                   1.0

    // Liquidity zone creation for high prices (resistance)
    if h[1] == high[1] and high < h
        if volume_ >= alert_threshold_med or show_low_liquidity
            box box1 = na
            if volume_ >= alert_threshold_high
                box1 := box.new(bar_index[1], high[1] + _size[1], bar_index, high[1], bgcolor=color_lower, force_overlay=true, border_color=na)
            else if volume_ >= alert_threshold_med
                box1 := box.new(bar_index[1], high[1] + _size[1], bar_index, high[1], bgcolor=color.new(color_high_res, 15), force_overlay=false, border_color=na)
            else
                box1 := box.new(bar_index[1], high[1] + _size[1], bar_index, high[1], bgcolor=color.new(color_high_res, 45), force_overlay=false, border_color=na)

            box.set_text(box1, txt)
            box.set_text_size(box1, volume_ >= alert_threshold_high ? size.large : volume_ >= alert_threshold_med ? size.normal : size.small)
            box.set_text_halign(box1, text.align_right)
            box.set_text_color(box1, text_col)
            
            box_res_array.push(box1)
            float_res_levels.push(current_level)

    // Liquidity zone creation for low prices (support)
    if l[1] == low[1] and low > l
        if volume_ >= alert_threshold_med or show_low_liquidity
            box box2 = na
            if volume_ >= alert_threshold_high
                box2 := box.new(bar_index[1], low[1], bar_index, low[1] - _size[1], bgcolor=color_upper, force_overlay=true, border_color=na)
            else if volume_ >= alert_threshold_med
                box2 := box.new(bar_index[1], low[1], bar_index, low[1] - _size[1], bgcolor=color.new(color_high_sup, 15), force_overlay=false, border_color=na)
            else
                box2 := box.new(bar_index[1], low[1], bar_index, low[1] - _size[1], bgcolor=color.new(color_high_sup, 45), force_overlay=false, border_color=na)

            box.set_text(box2, txt)
            box.set_text_size(box2, volume_ >= alert_threshold_high ? size.large : volume_ >= alert_threshold_med ? size.normal : size.small)
            box.set_text_halign(box2, text.align_right)
            box.set_text_color(box2, text_col)
            
            box_sup_array.push(box2)
            float_sup_levels.push(current_level)

    // Process existing zones and check if price is inside
    [in_res, res_level, res_price] = process_zones(box_res_array, float_res_levels, true)
    [in_sup, sup_level, sup_price] = process_zones(box_sup_array, float_sup_levels, false)
    
    [in_res, in_sup, res_level, sup_level, res_price, sup_price]

// =============================================================================
// DAILY HIGH/LOW TRACKING
// =============================================================================

// Daily level settings
daily_high_color = color.new(color.green, 15)
daily_low_color = color.new(color.red, 15)
daily_level_width = 2
daily_level_style = "Dashed"

// Set line style based on user input
var line_style = daily_level_style == "Solid" ? line.style_solid : daily_level_style == "Dashed" ? line.style_dashed : line.style_dotted

// Variables to track daily high and low. Create lines/labels once and update.
var float day_high = na
var float day_low = na
var line day_high_line = line.new(na, na, na, na)
var line day_low_line = line.new(na, na, na, na)
var label day_high_label = label.new(na, na, "")
var label day_low_label = label.new(na, na, "")

// Check for new day
new_day = ta.change(dayofweek)

// Update high and low values
day_high := new_day ? high : (high > day_high ? high : day_high)
day_low := new_day ? low : (low < day_low ? low : day_low)

// Manage the visibility and position of lines and labels
if show_daily_levels
    // Define style for the current bar
    line_style := daily_level_style == "Solid" ? line.style_solid : daily_level_style == "Dashed" ? line.style_dashed : line.style_dotted

    // Update High Line
    line.set_xy1(day_high_line, bar_index[1], day_high)
    line.set_xy2(day_high_line, bar_index, day_high)
    line.set_color(day_high_line, daily_high_color)
    line.set_width(day_high_line, daily_level_width)
    line.set_style(day_high_line, line_style)
    
    // Update High Label
    label.set_xy(day_high_label, bar_index, day_high)
    label.set_text(day_high_label, "Day High")
    label.set_color(day_high_label, color.new(color.black, 100))
    label.set_textcolor(day_high_label, color.teal)
    label.set_style(day_high_label, label.style_label_down)
    label.set_size(day_high_label, size.small)

    // Update Low Line
    line.set_xy1(day_low_line, bar_index[1], day_low)
    line.set_xy2(day_low_line, bar_index, day_low)
    line.set_color(day_low_line, daily_low_color)
    line.set_width(day_low_line, daily_level_width)
    line.set_style(day_low_line, line_style)

    // Update Low Label
    label.set_xy(day_low_label, bar_index, day_low)
    label.set_text(day_low_label, "Day Low")
    label.set_color(day_low_label, color.new(color.black, 100))
    label.set_textcolor(day_low_label, color.maroon)
    label.set_style(day_low_label, label.style_label_up)
    label.set_size(day_low_label, size.small)
else
    // If disabled, hide the drawings by moving them to na
    line.set_xy1(day_high_line, na, na)
    line.set_xy2(day_high_line, na, na)
    label.set_xy(day_high_label, na, na)
    line.set_xy1(day_low_line, na, na)
    line.set_xy2(day_low_line, na, na)
    label.set_xy(day_low_label, na, na)

// =============================================================================
// MAIN EXECUTION
// =============================================================================

// Update liquidity zones and get price status
[in_resistance, in_support, res_zone_level, sup_zone_level, res_zone_price, sup_zone_price] = update_liquidity_zones()

// Store price zone status for alerts
price_in_resistance := in_resistance
price_in_support := in_support

// Update previous position variables for next bar
was_in_resistance := price_in_resistance
was_in_support := price_in_support

// Detect significant zone penetration (more than threshold% into zone) - only most current
significant_zone_penetration := false
penetration_zone_type := ""

if price_in_resistance and box_res_array.size() > 0
    // Find the most current resistance zone that contains current price
    for i = box_res_array.size() - 1 to 0
        box_id = box_res_array.get(i)
        box_top = box_id.get_top()
        box_bottom = box_id.get_bottom()
        if not na(box_top) and not na(box_bottom) and close >= box_bottom and close <= box_top
            zone_height = box_top - box_bottom
            penetration_distance = box_top - close
            penetration_percentage = penetration_distance / zone_height
            if penetration_percentage > penetration_threshold  // More than threshold% into the zone
                significant_zone_penetration := true
                penetration_zone_type := "resistance"
                break

if price_in_support and box_sup_array.size() > 0
    // Find the most current support zone that contains current price
    for i = box_sup_array.size() - 1 to 0
        box_id = box_sup_array.get(i)
        box_top = box_id.get_top()
        box_bottom = box_id.get_bottom()
        if not na(box_top) and not na(box_bottom) and close >= box_bottom and close <= box_top
            zone_height = box_top - box_bottom
            penetration_distance = close - box_bottom
            penetration_percentage = penetration_distance / zone_height
            if penetration_percentage > penetration_threshold  // More than threshold% into the zone
                significant_zone_penetration := true
                penetration_zone_type := "support"
                break

// =============================================================================
// VISUAL ELEMENTS
// =============================================================================

// Volume spike signals
plotshape(showSignals and longVolumeCondition, title="Volume Spike Long", location=location.belowbar, color=color.new(color.green, 0), style=shape.labelup, size=size.small)
plotshape(showSignals and shortVolumeCondition, title="Volume Spike Short", location=location.abovebar, color=color.new(color.red, 0), style=shape.labeldown, size=size.small)

// Volume spike bars (optional)
longVolumeSpike = isVolumeSpike and priceChange > 0
shortVolumeSpike = isVolumeSpike and priceChange < 0
barcolor(showVolumeBars and longVolumeSpike ? color.new(color.green, 0) : showVolumeBars and shortVolumeSpike ? color.new(color.red, 0) : na, title="Volume Spike")

// Zone penetration indicators
plotshape(series=significant_zone_penetration and penetration_zone_type == "resistance" and show_alert_indicators, title="Resistance Zone Penetration", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.tiny)
plotshape(series=significant_zone_penetration and penetration_zone_type == "support" and show_alert_indicators, title="Support Zone Penetration", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.tiny)

// Limit number of boxes displayed on the chart
a_allBoxes = box.all
if a_allBoxes.size() > box_amount
    box.delete(a_allBoxes.shift())

// =============================================================================
// ALERT SYSTEM
// =============================================================================

// Volume spike alerts
if enableAlerts and longVolumeCondition
    alert("WTT_Syzygy Volume Spike Long - " + syminfo.ticker + " Price: " + str.tostring(close), alert.freq_once_per_bar)

if enableAlerts and shortVolumeCondition
    alert("WTT_Syzygy Volume Spike Short - " + syminfo.ticker + " Price: " + str.tostring(close), alert.freq_once_per_bar)

// Zone penetration alerts
if enableAlerts and significant_zone_penetration and penetration_zone_type == "resistance"
    alert(syminfo.ticker + " - WTT_Syzygy Resistance zone penetration: Price (" + str.tostring(close) + ") moved more than " + str.tostring(math.round(penetration_threshold * 100)) + "% into resistance zone.", alert.freq_once_per_bar)

if enableAlerts and significant_zone_penetration and penetration_zone_type == "support"
    alert(syminfo.ticker + " - WTT_Syzygy Support zone penetration: Price (" + str.tostring(close) + ") moved more than " + str.tostring(math.round(penetration_threshold * 100)) + "% into support zone.", alert.freq_once_per_bar)

// =============================================================================
// REFERENCE PLOTS (HIDDEN)
// =============================================================================

// Plot volume ratio for reference (hidden)
plot(volumeRatio, "Volume Ratio", color=color.gray, display=display.none)
plot(volumeThreshold, "Threshold", color=color.red, display=display.none)
